<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jim-tech.github.io/</id><title>至千里!</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-11-14T19:31:47+08:00</updated> <author> <name>积木</name> <uri>https://jim-tech.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://jim-tech.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://jim-tech.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2021 积木 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>WSL2</title><link href="https://jim-tech.github.io/posts/wsl2/" rel="alternate" type="text/html" title="WSL2" /><published>2021-11-13T09:55:38+08:00</published> <updated>2021-11-14T19:20:11+08:00</updated> <id>https://jim-tech.github.io/posts/wsl2/</id> <content src="https://jim-tech.github.io/posts/wsl2/" /> <author> <name>积木</name> </author> <category term="Tools" /> <summary> 1. WSL2 安装和配置 之所以开始折腾WSL2，是因为再也无法忍受在Windows 10上令人崩溃的开发效率了。Simplicity Studio这类基于开源软件的工具的通病是在Windows平台上的性能都不理想。以编译homekit_lightbulb_dmp这个sample为例，Linux平台上大约耗时不到3min，在windows 10上居然可以消耗15min。另外在Linux平台上命令行编译只需要59s。这个是促使我把Simplicity Studio迁移到Linux的原因。奈何工作电脑仍然是Windows 10的系统，最佳的办法是使用WSL2. 1.1. 安装WSL2 通过命令winver确认版本，要求版本2004以上。 通过settings找到Turn Windows Features on or off, 勾选以下插件： Vir... </summary> </entry> <entry><title>使用ccache来提高Simplicity Studio编译效率</title><link href="https://jim-tech.github.io/posts/ccache/" rel="alternate" type="text/html" title="使用ccache来提高Simplicity Studio编译效率" /><published>2021-09-10T23:50:38+08:00</published> <updated>2021-09-17T13:57:40+08:00</updated> <id>https://jim-tech.github.io/posts/ccache/</id> <content src="https://jim-tech.github.io/posts/ccache/" /> <author> <name>积木</name> </author> <category term="Tools" /> <summary> 1. ccache 简介 ccache是compiler cache的缩写，官网 https://ccache.dev/ 。其主要原理是将编译过的文件缓存在文件系统中。后续编译的时候，优先从cache中查找内容一致的文件，如果命中，就直接使用相应的目标文件。对于Simplicity Studio这样大部分情况都是编译SDK的场景，非常有用。 2. 安装 从 https://ccache.dev/download.html 这里下载编译好的windows版本的二进制文件，解压，然后将路径加入了path环境变量中。 在cmd窗口中，输入ccache --version命令来测试一下路径是否添加好。 PS C:\Users\Administrator&amp;gt; ccache --version ccache version 4.2.1 Copyright (C) 2002-2007... </summary> </entry> <entry><title>vscode notes</title><link href="https://jim-tech.github.io/posts/vscode/" rel="alternate" type="text/html" title="vscode notes" /><published>2021-09-02T21:43:05+08:00</published> <updated>2021-09-04T12:44:13+08:00</updated> <id>https://jim-tech.github.io/posts/vscode/</id> <content src="https://jim-tech.github.io/posts/vscode/" /> <author> <name>积木</name> </author> <category term="Tools" /> <summary> 1. 好用的Extension Remote系列 Remote SSH Remote WSL Remote Containers Git Git Graph GitLens ProgrammingL C/C++ Python Qt for Python View/Editor Auto Close Tag Auto Complete Tag Auto Rename Tag Indent Rainbow Markdown All in One Project/Workspace Proj... </summary> </entry> <entry><title>Tmux notes</title><link href="https://jim-tech.github.io/posts/tmux/" rel="alternate" type="text/html" title="Tmux notes" /><published>2021-09-02T21:43:05+08:00</published> <updated>2021-09-03T00:29:05+08:00</updated> <id>https://jim-tech.github.io/posts/tmux/</id> <content src="https://jim-tech.github.io/posts/tmux/" /> <author> <name>积木</name> </author> <category term="Tools" /> <summary> 1. 安装 https://github.com/gpakosz/.tmux 2. 会话 命令 说明 tmux new -s &amp;lt;session-name&amp;gt; 创建会话 tmux ls 查看会话 tmux ls-session 查看会话 tmux attach -t &amp;lt;session-id&amp;gt; Attach tmux attach -t &amp;lt;session-name&amp;gt; Attach tmux detach Detach ... </summary> </entry> <entry><title>My Vim notes</title><link href="https://jim-tech.github.io/posts/Vim/" rel="alternate" type="text/html" title="My Vim notes" /><published>2021-09-02T00:23:31+08:00</published> <updated>2021-09-04T12:44:13+08:00</updated> <id>https://jim-tech.github.io/posts/Vim/</id> <content src="https://jim-tech.github.io/posts/Vim/" /> <author> <name>积木</name> </author> <category term="VIM" /> <summary> 快捷键 Navigate 说明 快捷键 切换前一个buffer &amp;lt;leader&amp;gt;bp 切换后一个buffer &amp;lt;leader&amp;gt;bn 上一个函数 [ 下一个函数 ] 上一个Block { 下一个Block } 跳转到定义处 &amp;lt;leader&amp;gt;csd 跳转到调用处 &amp;lt;leader&amp;gt;csr 跳转到引用处 ... </summary> </entry> </feed>
